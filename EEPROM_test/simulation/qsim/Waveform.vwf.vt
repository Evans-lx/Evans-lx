// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2023 17:05:13"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          EEPROM_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EEPROM_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg treg_i2c_sda;
reg rst_n;
// wires                                               
wire i2c_scl;
wire i2c_sda;
wire [8:0] seg_1;
wire [8:0] seg_2;

// assign statements (if any)                          
assign i2c_sda = treg_i2c_sda;
EEPROM_test i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.i2c_scl(i2c_scl),
	.i2c_sda(i2c_sda),
	.rst_n(rst_n),
	.seg_1(seg_1),
	.seg_2(seg_2)
);
initial 
begin 
#100000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// i2c_sda
initial
begin
	treg_i2c_sda = 1'bZ;
	treg_i2c_sda = #999000 1'b0;
end 

// rst_n
initial
begin
	rst_n = 1'b1;
end 
endmodule

