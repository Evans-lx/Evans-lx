// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "04/12/2023 14:55:02"
                                                                                
// Verilog Test Bench template for design : MMA7660_test
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module tb_MMA7660_test();
// constants                                           
// general purpose registers
// test vector input registers
reg clk;
reg rst_n;
// wires                                               
wire i2c_scl;
wire i2c_sda;
wire oled_clk;
wire oled_dat;
wire oled_dcn;
wire oled_rst;

// assign statements (if any)                          
//assign i2c_sda = treg_i2c_sda;
MMA7660_test UUT (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.i2c_scl(i2c_scl),
	.i2c_sda(i2c_sda),
	.oled_clk(oled_clk),
	.oled_dat(oled_dat),
	.oled_dcn(oled_dcn),
	.oled_rst(oled_rst),
	.rst_n(rst_n)
);
initial                                                
begin                                                  
	clk = 1'b0; 
	rst_n = 1'b0;
	#200  //延时200ns
	rst_n = 1'b1; 
end	
always #10 clk = ~clk;  
//	initial begin
//		i2c_scl = 1;
//		#10;
//		i2c_sda = 1;
//		#10;
//		i2c_scl = 0;
//		#10;
//		i2c_sda = 0;
//		#10;
//		i2c_scl = 1;
//		#10;
//		i2c_sda = 1;
//	end                                                                                                                   
endmodule

